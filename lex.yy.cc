/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>
#include <iostream>
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 123
#define YY_END_OF_BUFFER 124
static yyconst short int yy_accept[398] =
    {   0,
        0,    0,  112,  112,    0,    0,  124,  123,   76,   75,
       77,   95,  123,  122,   96,   92,  123,   80,   81,   90,
       88,   87,   89,   86,   91,  117,  117,   85,   84,  100,
       98,  101,   94,  116,   82,   83,   99,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   78,   93,   79,   97,  112,  113,
       61,    0,  121,    0,  122,  122,   66,   62,   72,    0,
      120,    0,   64,   53,    0,   67,   54,   68,  111,   65,
      119,    0,  118,  118,  118,  117,   55,   59,   60,   58,
       56,  116,    0,    0,  115,   73,  116,  116,  116,  116,

      116,  116,  116,  116,  116,  116,   13,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,   23,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       74,   63,  112,  113,  113,  114,  119,   69,   70,   57,
        0,    0,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,   19,  116,  116,  116,  116,  116,  116,  102,  116,
      116,   30,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

       48,   49,  116,  116,  116,  119,   71,    0,    0,    0,
        0,    0,  115,  116,  116,  116,  116,  108,  116,    6,
        7,  116,  107,  116,  116,  116,  116,  116,   14,   15,
      116,  116,  116,  116,  116,  116,   22,  116,  116,  116,
      116,  116,  104,  116,   31,  116,  116,  116,  116,  116,
      116,   38,  116,  116,  116,  116,  116,  116,   44,  116,
      116,  109,   50,  116,  116,    0,    0,    0,  116,  116,
      116,    4,  116,    8,    9,   10,  116,  116,  116,  116,
      110,   17,  105,  116,  116,  116,  116,   26,  116,  116,
      116,  116,   33,  116,  116,  116,  116,  116,  103,  116,

       41,  116,  116,   45,  116,  116,   52,    0,    0,    0,
        0,    0,  115,  116,    2,  116,  116,  116,  116,  106,
      116,  116,   20,  116,  116,   25,  116,  116,   29,  116,
      116,  116,  116,   37,   39,   40,   42,  116,   46,  116,
      116,    0,  115,    0,    0,    0,  116,    3,    5,  116,
       12,   16,   18,   21,  116,  116,  116,  116,   34,   35,
      116,  116,  116,  116,    0,    0,    0,    0,    0,    0,
        0,  115,    1,   11,  116,  116,  116,   32,  116,  116,
      116,   51,    0,    0,    0,  116,  116,   28,   36,  116,
       47,   24,   27,  116,  116,   43,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,    1,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,   29,    1,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       31,   32,   33,   34,   30,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   30,   44,   45,   46,   47,
       48,   49,   30,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    1,    1,    2,    1,    1,    1,    1,    3,    1,
        1,    1,    1,    1,    1,    4,    1,    1,    1,    3,
        1,    5,    5,    1,    1,    1,    1,    1,    1,    5,
        1,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1,    1
    } ;

static yyconst short int yy_base[412] =
    {   0,
        0,    0,   59,   60,    0,    0,  636,  741,  741,  741,
      741,  608,   56,  624,  605,   54,   54,  741,  741,  604,
       51,  741,   60,  741,   53,   75,   80,  741,  741,   44,
      603,   63,  741,    0,  102,  741,  602,   41,   62,   76,
       46,   69,   91,   74,   91,  578,   93,   80,   92,  586,
       98,   51,   82,  582,  741,  114,  741,  741,    0,  127,
      741,  138,  741,  619,    0,  611,  741,  741,  741,  136,
      741,  616,  741,  741,  134,  741,  741,  741,  741,  741,
      741,  136,  143,  151,  152,  153,  579,  741,  741,  741,
      150,    0,  177,  148,  741,  741,  554,  553,  555,  563,

      133,  137,  565,  564,  551,  557,  543,  543,  540,  540,
      546,  541,  539,  536,  533,  536,  530,    0,  519,  139,
      520,  514,  510,  519,  523,  509,  523,  149,  523,  142,
      510,  521,  506,  511,  506,  152,  161,  500,  156,  506,
      741,  741,    0,  184,  187,  741,  197,  741,  741,  521,
      531,  219,  493,  505,  485,  494,  489,  492,  165,  489,
      474,  472,  160,  487,  485,  481,  472,  478,  465,  480,
      477,    0,  458,  471,  461,   51,  468,  454,  453,  450,
      447,    0,  444,  438,  447,  441,  430,  431,  437,  428,
      426,  428,  425,  435,  421,  435,  420,  421,  421,  415,

        0,    0,  415,  417,  406,  741,  741,  434,  427,  225,
      257,  263,  270,  397,  396,  406,  400,    0,  397,    0,
        0,  399,    0,  389,  387,  393,  382,  389,    0,    0,
      386,  392,  385,  364,  365,  364,    0,  374,  362,  360,
      374,  358,    0,  353,    0,  371,  354,  368,  367,  362,
      357,    0,  348,  345,  353,  345,  356,  350,    0,  323,
      326,    0,    0,  324,  336,  295,  302,  308,  339,  320,
      336,    0,  317,    0,    0,    0,  322,  323,  327,  327,
        0,  319,    0,  324,  317,  313,  306,    0,  310,  315,
      315,  288,    0,  298,  286,  300,  299,  287,    0,  296,

        0,  290,  281,  279,  284,  283,    0,  340,  346,  378,
      384,  416,  422,  288,    0,  275,  282,  267,  267,    0,
      266,  238,    0,  257,  254,    0,  255,  254,    0,  240,
      248,  247,  233,    0,    0,    0,    0,  235,    0,  243,
      236,  217,  264,  454,  460,  492,  219,    0,    0,  218,
        0,    0,    0,    0,  209,  216,  217,  203,    0,    0,
      212,  203,  202,  209,  218,  498,  530,  536,  568,  574,
      606,  612,    0,    0,  195,  197,  205,    0,  205,  199,
      183,    0,  200,  220,  644,  164,  173,    0,    0,  151,
        0,    0,    0,  168,  129,    0,  741,  677,  682,  687,

      692,  697,  700,   67,  705,  710,  715,  720,  725,  730,
      735
    } ;

static yyconst short int yy_def[412] =
    {   0,
      397,    1,  398,  398,  399,  399,  397,  397,  397,  397,
      397,  397,  400,  401,  397,  397,  402,  397,  397,  397,
      397,  397,  397,  397,  397,  403,  403,  397,  397,  397,
      397,  397,  397,  404,  397,  397,  397,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  397,  397,  397,  397,  405,  406,
      397,  400,  397,  400,  401,  401,  397,  397,  397,  402,
      397,  402,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  403,  403,  403,  403,  397,  397,  397,  397,
      397,  404,  397,  397,  397,  397,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      397,  397,  405,  406,  406,  397,  397,  397,  397,  397,
      407,  408,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  397,  397,  407,  407,  408,
      408,  408,  408,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  397,  409,  408,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  409,  409,  407,
      409,  409,  409,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  407,  407,  408,  410,  409,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  411,  409,  409,  409,  407,  410,
      409,  409,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  407,  411,  407,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,    0,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397
    } ;

static yyconst short int yy_nxt[804] =
    {   0,
        8,    8,    9,   10,    8,    8,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,    8,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   34,   45,   34,   46,   34,   47,   48,   49,   50,
       51,   52,   34,   53,   54,   34,   34,   34,   55,   56,
       57,   58,    8,    8,   63,   68,   71,   74,   79,   87,
       88,   92,   75,   75,   60,   60,   97,   76,   77,   80,
       69,   75,   75,   81,  106,   72,   78,   64,   81,   90,
       91,   98,  136,  107,   82,  238,   83,   83,  239,   82,

      137,   86,   86,   93,   93,   93,   93,   93,   93,   99,
      102,  100,  116,  108,   85,  109,  138,  103,  101,   85,
      104,  117,   94,  105,  110,  111,  127,  122,  125,  139,
      118,  123,  126,  112,   95,  113,  119,  120,  114,  131,
      141,  128,  145,  115,  129,  124,   63,  146,   71,  132,
      133,  397,  134,   82,  135,   75,   75,  147,  147,  397,
      397,  397,   82,  151,   83,   83,  396,   72,  152,   64,
      397,  397,   82,  142,   86,   86,  149,  150,   93,   93,
       93,   93,   93,   93,  157,  177,  158,  159,  160,  178,
      179,  187,  190,  191,  197,  199,  188,   94,  203,  397,

      204,  198,  145,  220,  397,  206,  395,  146,  394,   95,
      225,  226,  393,  200,  392,  209,  221,  201,  147,  147,
      211,  211,   93,  211,  211,  211,  211,  211,   93,  211,
      211,  211,  365,  384,  391,  384,  206,  366,  385,  212,
      385,  390,  389,  388,  387,  212,  386,  382,  381,  380,
      379,  213,  378,  377,  376,  375,  374,  213,  211,  211,
       93,  211,  211,  211,  211,  211,   93,  211,  211,  211,
      373,  211,  211,   93,  211,  211,  211,  212,  267,  209,
      364,  363,  362,  268,  361,  360,  359,  358,  357,  213,
      212,  356,  355,  354,  353,  213,   93,   93,   93,   93,

       93,   93,  213,  309,  309,  310,  309,  309,  309,  211,
      211,   93,  211,  211,  211,   94,  352,  311,  351,  350,
      349,  348,  312,  267,  347,  341,  340,   95,  268,  339,
      338,  337,  336,  335,  313,  334,  333,  332,  331,  330,
      213,  309,  309,  310,  309,  309,  309,  309,  309,  310,
      309,  309,  309,  329,  328,  311,  327,  326,  325,  324,
      312,  311,  323,  322,  321,  320,  312,  319,  318,  317,
      316,  315,  313,  314,  307,  306,  305,  304,  313,  310,
      310,  310,  310,  310,  310,  309,  309,  310,  309,  309,
      309,  303,  302,  209,  301,  300,  299,  298,  342,  297,

      296,  295,  294,  293,  344,  292,  291,  290,  289,  288,
      343,  287,  286,  285,  284,  283,  313,  309,  309,  310,
      309,  309,  309,  309,  309,  310,  309,  309,  309,  282,
      281,  345,  280,  279,  278,  277,  346,  311,  276,  275,
      274,  273,  312,  272,  271,  270,  269,  266,  313,  209,
      265,  264,  263,  262,  313,  211,  211,   93,  211,  211,
      211,  368,  368,  369,  368,  368,  368,  261,  260,  267,
      259,  258,  257,  256,  268,  370,  255,  254,  253,  252,
      371,  251,  250,  249,  248,  247,  213,  246,  245,  244,
      243,  242,  372,  309,  309,  310,  309,  309,  309,  309,

      309,  310,  309,  309,  309,  241,  240,  345,  237,  236,
      235,  234,  346,  311,  233,  232,  231,  230,  312,  229,
      228,  227,  224,  223,  313,  222,  219,  218,  217,  216,
      313,  309,  309,  310,  309,  309,  309,  309,  309,  310,
      309,  309,  309,  215,  214,  311,  209,  207,  205,  202,
      312,  311,  196,  195,  194,  193,  312,  192,  189,  186,
      185,  184,  313,  183,  182,  181,  180,  176,  313,  310,
      310,  310,  310,  310,  310,  368,  368,  369,  368,  368,
      368,  175,  174,  209,  173,  172,  171,  170,  342,  370,
      169,  168,  167,  166,  371,  165,  164,  163,  162,  161,

      343,  156,  155,  154,  153,  148,  372,  309,  309,  310,
      309,  309,  309,  309,  309,  310,  309,  309,  309,  397,
       66,  345,  397,  140,  130,  121,  346,  311,   96,   89,
       73,   67,  312,   66,   61,  397,  397,  397,  313,  397,
      397,  397,  397,  397,  313,  310,  310,  310,  310,  310,
      310,  397,  397,  397,  397,  397,  397,  397,  397,  209,
      397,  397,  397,  397,  342,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  343,   59,   59,   59,
       59,   59,    8,    8,    8,    8,    8,   62,   62,   62,
       62,   62,   65,  397,   65,   65,   65,   70,   70,   70,

       70,   70,   84,  397,   84,  143,  397,  143,  397,  143,
      144,  397,  144,  144,  144,  208,  208,  208,  208,  208,
      210,  210,  210,  210,  210,  308,  308,  308,  308,  308,
      367,  367,  367,  367,  367,  383,  383,  383,  383,  383,
        7,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397
    } ;

static yyconst short int yy_chk[804] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,   13,   16,   17,   21,   25,   30,
       30,  404,   21,   21,    3,    4,   38,   21,   23,   25,
       16,   23,   23,   26,   41,   17,   23,   13,   27,   32,
       32,   38,   52,   41,   26,  176,   26,   26,  176,   27,

       52,   27,   27,   35,   35,   35,   35,   35,   35,   39,
       40,   39,   44,   42,   26,   42,   53,   40,   39,   27,
       40,   44,   35,   40,   42,   43,   49,   47,   48,   53,
       45,   47,   48,   43,   35,   43,   45,   45,   43,   51,
       56,   49,   60,   43,   49,   47,   62,   60,   70,   51,
       51,   83,   51,   75,   51,   75,   75,   82,   82,   84,
       85,   86,   83,   94,   83,   83,  395,   70,   94,   62,
       84,   85,   86,   56,   86,   86,   91,   91,   93,   93,
       93,   93,   93,   93,  101,  120,  101,  102,  102,  120,
      120,  128,  130,  130,  136,  137,  128,   93,  139,  144,

      139,  136,  145,  159,  144,  147,  394,  145,  390,   93,
      163,  163,  387,  137,  386,  383,  159,  137,  147,  147,
      152,  152,  152,  152,  152,  152,  210,  210,  210,  210,
      210,  210,  342,  365,  381,  384,  147,  342,  365,  152,
      384,  380,  379,  377,  376,  210,  375,  364,  363,  362,
      361,  152,  358,  357,  356,  355,  350,  210,  211,  211,
      211,  211,  211,  211,  212,  212,  212,  212,  212,  212,
      347,  213,  213,  213,  213,  213,  213,  211,  212,  343,
      341,  340,  338,  212,  333,  332,  331,  330,  328,  211,
      213,  327,  325,  324,  322,  212,  266,  266,  266,  266,

      266,  266,  213,  267,  267,  267,  267,  267,  267,  268,
      268,  268,  268,  268,  268,  266,  321,  267,  319,  318,
      317,  316,  267,  268,  314,  306,  305,  266,  268,  304,
      303,  302,  300,  298,  267,  297,  296,  295,  294,  292,
      268,  308,  308,  308,  308,  308,  308,  309,  309,  309,
      309,  309,  309,  291,  290,  308,  289,  287,  286,  285,
      308,  309,  284,  282,  280,  279,  309,  278,  277,  273,
      271,  270,  308,  269,  265,  264,  261,  260,  309,  310,
      310,  310,  310,  310,  310,  311,  311,  311,  311,  311,
      311,  258,  257,  310,  256,  255,  254,  253,  310,  251,

      250,  249,  248,  247,  311,  246,  244,  242,  241,  240,
      310,  239,  238,  236,  235,  234,  311,  312,  312,  312,
      312,  312,  312,  313,  313,  313,  313,  313,  313,  233,
      232,  312,  231,  228,  227,  226,  312,  313,  225,  224,
      222,  219,  313,  217,  216,  215,  214,  209,  312,  208,
      205,  204,  203,  200,  313,  344,  344,  344,  344,  344,
      344,  345,  345,  345,  345,  345,  345,  199,  198,  344,
      197,  196,  195,  194,  344,  345,  193,  192,  191,  190,
      345,  189,  188,  187,  186,  185,  344,  184,  183,  181,
      180,  179,  345,  346,  346,  346,  346,  346,  346,  366,

      366,  366,  366,  366,  366,  178,  177,  346,  175,  174,
      173,  171,  346,  366,  170,  169,  168,  167,  366,  166,
      165,  164,  162,  161,  346,  160,  158,  157,  156,  155,
      366,  367,  367,  367,  367,  367,  367,  368,  368,  368,
      368,  368,  368,  154,  153,  367,  151,  150,  140,  138,
      367,  368,  135,  134,  133,  132,  368,  131,  129,  127,
      126,  125,  367,  124,  123,  122,  121,  119,  368,  369,
      369,  369,  369,  369,  369,  370,  370,  370,  370,  370,
      370,  117,  116,  369,  115,  114,  113,  112,  369,  370,
      111,  110,  109,  108,  370,  107,  106,  105,  104,  103,

      369,  100,   99,   98,   97,   87,  370,  371,  371,  371,
      371,  371,  371,  372,  372,  372,  372,  372,  372,   72,
       66,  371,   64,   54,   50,   46,  371,  372,   37,   31,
       20,   15,  372,   14,   12,    7,    0,    0,  371,    0,
        0,    0,    0,    0,  372,  385,  385,  385,  385,  385,
      385,    0,    0,    0,    0,    0,    0,    0,    0,  385,
        0,    0,    0,    0,  385,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  385,  398,  398,  398,
      398,  398,  399,  399,  399,  399,  399,  400,  400,  400,
      400,  400,  401,    0,  401,  401,  401,  402,  402,  402,

      402,  402,  403,    0,  403,  405,    0,  405,    0,  405,
      406,    0,  406,  406,  406,  407,  407,  407,  407,  407,
      408,  408,  408,  408,  408,  409,  409,  409,  409,  409,
      410,  410,  410,  410,  410,  411,  411,  411,  411,  411,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
#define INITIAL 0
#line 2 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
		#include "yacc.hpp"
		#include <iostream>
		#include <istream>
		#include <ostream>		
		#include <FlexLexer.h>	
		int lineNo = 1;
		int colNo = 1;
		int i;
        float f;
        double d;
#define multilinecomment 1

#define string 2

#line 655 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 38 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"

#line 784 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 398 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 741 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 39 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return ABSTRACT;
						}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return ASSERT;
						}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 53 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return BOOLEAN;
						}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 60 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return BREAK;
						}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 67 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return BYVALUE;
						}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return CASE;
						}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 81 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return CAST;
						}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 88 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  CATCH;
						}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  CLASS;
						}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 102 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  CONST;
						}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 109 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  CONTINUE;
						}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 116 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  DEFAULT;
                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 123 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  DO;
                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 130 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  ELSE;
                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 138 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  ENUM;
                        }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 145 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext); 
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  EXTENDS;
                        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 152 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  FINAL;
                        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 159 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  FINALLY;
                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 166 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  FOR;
                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 173 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  FUTURE;
                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 180 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  GENERIC;
                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 188 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  GOTO;
                        }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 195 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  IF;
                        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 202 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  IMPLEMENTS;
                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 209 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  IMPORT;
                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 216 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  INNER;
                        }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 223 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  INSTANCEOF;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 230 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  INTERFACE;
                        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 237 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  NATIVE;
                        }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 244 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return	NEW;
                        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 252 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  JNULL;
                        }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 259 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  OPERATOR;
                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 266 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  OUTER;
                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 273 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  PACKAGE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 280 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  PRIVATE;
                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 287 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  PROTECTED;
                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 294 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  PUBLIC;
                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 302 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
                            colNo += strlen(yytext);
                            yylval.r.myLineNo= lineNo; 
                            yylval.r.myColNo = colNo; 
                            return  REST;
                        }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 309 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  RETURN;
						}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 316 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  STATIC;
						}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 323 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  SUPER;
						}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 330 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  SWITCH;
						}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 337 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  SYNCHRONIZED;
						}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 344 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return	THIS;
						}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 351 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  THROW;
						}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 358 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  THROWS;
						}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 365 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  TRANSIENT;
						}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 372 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  TRY;
						}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 379 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  VAR;
						}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 386 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  VOID;
						}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 393 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  VOLATILE;
						}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 400 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  STATIC;
						}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 407 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_INC;
						}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 414 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_DEC;
						}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 421 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_SHL;
						}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 428 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_SHR;
						}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 435 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_SHRR;
						}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 442 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_GE;
						}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 449 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_LE;
						}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 456 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_EQ;
						}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 463 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_NE;
						}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 470 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_LAND;
						}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 477 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  OP_LOR;
						}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 484 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_MUL;
						}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 491 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_DIV;
						}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 498 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_MOD;
						}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 505 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_ADD;
						}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 512 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_SUB;
						}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 519 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext);
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_SHL;
						}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 526 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_SHR;
						}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 533 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_SHRR;
						}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 540 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_AND;
						}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 547 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_XOR;
						}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 554 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  ASS_OR;
						}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 561 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							lineNo = lineNo+1;
							colNo = 1;
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							//return NEW_LINE;
						}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 569 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += 4;
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							//return TAB;
						}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 576 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += 1;
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							//return SPACE;
						}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 583 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return OPEN_D;
						}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 590 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return CLOSE_D;
						}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 597 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return OPEN_B;
						}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 604 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return CLOSE_B;
						}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 611 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return OPEN;
						}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 618 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return CLOSE;
						}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 625 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return SEMICOLON;
						}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 632 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return COLON;
						}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 639 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return POINT;
						}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 646 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return COMMA;
						}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 653 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return PLUS;
						}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 660 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return MINUS;
						}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 667 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return MULT;
						}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 674 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return DIV;
						}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 681 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return AND;
						}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 688 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return OR;
						}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 695 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return QUES_MARK;
						}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 702 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return EXC_MARK;
						}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 709 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return MODULE;
						}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 716 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return DURA;
						}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 723 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return ASSIGN;
						}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 730 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return XOR;
						}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 737 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return LESS;
						}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 744 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							return GREATER;
						}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 751 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo;
							int i = atoi(yytext);
							yylval.r.i=i;
							return INT;
						}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 760 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							int i = atoi(yytext);
							yylval.r.i=i;
							return SHORT;
						}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 769 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							int i = atoi(yytext);
							yylval.r.i=i;
							return  LONG;
						}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 778 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							float f = atof(yytext);
							yylval.r.i=f;
							return	FLOAT;
						}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 787 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							double d= atof(yytext);
							yylval.r.f = d;
							return  DOUBLE;
						}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 796 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  CHAR;
						}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 803 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  BYTE;
						}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 810 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  BOOLLIT;
						}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 817 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							colNo += strlen(yytext); 
							yylval.r.myLineNo= lineNo; 
							yylval.r.myColNo = colNo; 
							return  BOOLLIT;
						}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 826 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{ BEGIN multilinecomment; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 827 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{lineNo++;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 828 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{lineNo++;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 829 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{ cout<<"\t it is a Multi Line Comment \n";
				   							yylval.r.myLineNo= lineNo; BEGIN INITIAL;
 }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 833 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{return OP_DIM;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 836 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{	
							yylval.r.myColNo = colNo;
							yylval.r.myLineNo = lineNo;
							colNo += strlen(yytext);
							char * x=new char [255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return IDENTIFIER;
						}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 847 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							yylval.r.myColNo = colNo;
							yylval.r.myLineNo = lineNo;
							colNo += strlen(yytext);
							cout<<":Integer value (yytext) ="<<yytext<<"\n";
							int i = atoi(yytext);
							cout<<":Int value as int ="<<i;
							yylval.r.i = i;
							if(strlen(yytext) <= 4)
								return INTEGER_VALUE;
							else
								return LONG_VALUE;
						}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 861 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							yylval.r.myColNo = colNo;
							yylval.r.myLineNo = lineNo;
							colNo += strlen(yytext);
							char * x=new char [255];
							x[0] = '\0';
							strcpy(x, yytext);
							yylval.r.str = x;
							return N_ID;
						}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 872 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							yylval.r.myColNo = colNo;
							yylval.r.myLineNo = lineNo;
							colNo += strlen(yytext);
							cout<<":Float value (yytext) ="<<yytext<<"\n";
							float f = atof(yytext);
							cout<<":Float value as float ="<<f;
							yylval.r.f = f;
							return FLOAT_VALUE;
						}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 883 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							yylval.r.myColNo = colNo;
							yylval.r.myLineNo = lineNo;
							colNo += strlen(yytext);

							char * x=new char [strlen(yytext)-2];
							x[0] = '\0';
							strncpy(x, yytext+1 , strlen(yytext) - 2);
							x[strlen(yytext) - 2]= '\0';
							cout << "CHAR: value (yytext) =" <<yytext<<"\n";
							yylval.r.c = *x;
							return CHAR_VALUE;
						}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 897 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							yylval.r.myColNo = colNo;
							yylval.r.myLineNo = lineNo;
							colNo += strlen(yytext);
							char * s=new char [strlen(yytext)-2];
							s[0] = '\0';
							strncpy(s, yytext + 1, strlen(yytext) - 2);
							s[strlen(yytext) - 2] = '\0';
							//strcpy(yylval.r.str,s);
							cout<<":String value (yytext) ="<<yytext<<"\n";
							yylval.r.str = s;
							return	STRING_VALUE;
						}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 911 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
{
							yylval.r.myColNo = colNo;
							yylval.r.myLineNo = lineNo;
							colNo += strlen(yytext);
							//cout<<"\t comment\n";
						}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 919 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"
ECHO;
	YY_BREAK
#line 2111 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multilinecomment):
case YY_STATE_EOF(string):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 398 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 398 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 397);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 919 "C:\\Users\\Dell-PC\\Documents\\Visual Studio 2013\\Projects\\JavaCompiler\\lex.l"


